'use strict';
// Declare app level module which depends on views, and components
angular.module('myApp', [
    'ngRoute',
    'ngAnimate',
    'CustomDirectives',
    'Home',
	'Login',
	'SignUp',
	'ForgotPassword'// append more modules here
]).
config(['$routeProvider', function($routeProvider) {
    $routeProvider.
        when('/sign-up', {
            controller: 'SignUpCtrl',
            templateUrl: "pages/sign-up/sign-up.html"
        }).
        when('/forgot-password', {
            controller: 'ForgotPasswordCtrl',
            templateUrl: 'pages/forgot-password/forgot-password.html'
        }).
		when('/login', {
            controller: 'LoginCtrl',
            templateUrl: 'pages/login/login.html'
        }).
		when('/home', {
            controller: 'HomeCtrl',
            templateUrl: 'pages/home/home.html'
        }).
		// append more pages here
        otherwise({redirectTo: '/login'});
}]);

// @codekit-append "js/custom-directives.js"
// @codekit-append "js/developer.js"
// @codekit-append "pages/home/home.js"
// @codekit-append "pages/login/login.js"
// @codekit-append "pages/sign-up/sign-up.js"
// @codekit-append "pages/forgot-password/forgot-password.js"
// append more files here

angular.module('CustomDirectives', [])

.directive('centerV', function() {
    return {
        restrict: 'A',
        link: function(scope, elem, attrs){
            center(elem);
            $(window).resize( function() {
                center(elem);
            });
            function center(elem){
                var elemHeight = elem.height(),
                    parent = $(window),
                    parentHeight = parent.height(),
                    marginTop = (parentHeight - elemHeight) / 2;
                elem.css("margin-top",marginTop+"px");
            }
        }
    };
})

.directive('vFont', function() {
    return {
        restrict: 'A',
        scope: {
            vh: '=vh',
            vw: '=vw'
        },
        link: function(scope, elem, attrs){
            if(scope.vh){
                var scrHeight = $(window).height();
                var px = (scrHeight * scope.vh) / 100;
                elem.css("font-size", px + "px");


                $(window).resize(function() {
                    var scrHeight = $(window).height();
                    var px = (scrHeight * scope.vh) / 100;
                    elem.css("font-size", px + "px");
                });
            }
            else if(scope.vw){
                var scrWidth = $(window).width();
                var px = (scrWidth * vw) / 100;
                elem.css('font-size', px + "px");

                $(window).resize(function() {
                    var scrWidth = $(window).width();
                    var px = (scrWidth * vw) / 100;
                    elem.css('font-size', px + "px");
                });
            }
        }
    };
});

(function () {
    "use strict";

    var methods, generateNewMethod, i, j, cur, old, addEvent;

    if ("console" in window) {
        methods = [
            "log", "assert", "clear", "count",
            "debug", "dir", "dirxml", "error",
            "exception", "group", "groupCollapsed",
            "groupEnd", "info", "profile", "profileEnd",
            "table", "time", "timeEnd", "timeStamp",
            "trace", "warn"
        ];

        generateNewMethod = function (oldCallback, methodName) {
            return function () {
                var args;
                //$("body").prepend("called console." + methodName + ", with " + arguments.length + " argument(s)");
                $("body").prepend(JSON.stringify(arguments));
                args = Array.prototype.slice.call(arguments, 0);
                Function.prototype.apply.call(oldCallback, console, arguments);
            };
        };

        for (i = 0, j = methods.length; i < j; i++) {
            cur = methods[i];
            if (cur in console) {
                old = console[cur];
                console[cur] = generateNewMethod(old, cur);
            }
        }
    }

    $(window).on("ReferenceError", function (msg, url, line) {
        $("body").prepend("Window error: " + msg + ", " + url + ", line " + line);
    });
}());
'use strict';

angular.module('Home', ['ngRoute'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/home', {
    templateUrl: 'pages/home/home.html',
    controller: 'HomeCtrl'
  });
}])

.controller('HomeCtrl', ['$http', '$scope', function ( $http, scope ) {
    //localStorage.setItem("msg","testing local storage");
    scope.message = localStorage.getItem("msg");
    $http.get("http://505.enaveed.com/web/index.php/api/food-items/get").then(function (response) {
        scope.foodItems = response.data.data;
        scope.message = scope.message + "\n data received..";
    }, function (response) {
        scope.message = scope.message + "\n error occurred..";
        scope.foodItems = response;
    });
}]);
'use strict';

angular.module('Login', ['ngRoute'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/login', {
    templateUrl: 'pages/login/login.html',
    controller: 'LoginCtrl'
  });
}])

.controller('LoginCtrl', ['$scope',function(scope) {

}]);
'use strict';

angular.module('SignUp', ['ngRoute'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/sign-up', {
    templateUrl: 'pages/sign-up/sign-up.html',
    controller: 'SignUpCtrl'
  });
}])

.controller('SignUpCtrl', [function() {

}]);
'use strict';

angular.module('ForgotPassword', ['ngRoute'])

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/forgot-password', {
    templateUrl: 'pages/forgot-password/forgot-password.html',
    controller: 'ForgotPasswordCtrl'
  });
}])

.controller('ForgotPasswordCtrl', [function() {

}]);